import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler

def task3_2():
    df = pd.read_csv('../filtered_vehicle.csv')
    
    # These are the vehicle characteristics we'll use for clustering
    numerical_features = [
        'NO_OF_WHEELS',        
        'NO_OF_CYLINDERS',     
        'SEATING_CAPACITY',    
        'TARE_WEIGHT',         
        'TOTAL_NO_OCCUPANTS'   
    ]
    # We group the data by vehicle characteristics
    grouped_data = df.groupby(['VEHICLE_YEAR_MANUF', 'VEHICLE_BODY_STYLE', 'VEHICLE_MAKE'])[numerical_features].mean().reset_index()
    
   
    # This ensures all features have equal weight in the clustering
    # MinMaxScaler transforms features to a range between 0 and 1
    # This part of the code was generated by ChatGPT as i didn't undersatnde how to do it but now i do
    scaler = MinMaxScaler()
    normalized_features = scaler.fit_transform(grouped_data[numerical_features])
    
    # Try k values from 1 to 10 to find the optimal number of clusters
    sse = []  
    k_range = range(1, 11)  
    
    for k in k_range:
        # Create a KMeans model with k clusters
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(normalized_features)
        sse.append(kmeans.inertia_)
    
    
    # Create the elbow plot
    plt.figure(figsize=(10, 6))
    plt.plot(k_range, sse, 'bx-')  
    plt.xlabel('Number of clusters (k)')
    plt.ylabel('Sum of Squared Errors (SSE)')
    plt.title('Elbow Method for Optimal k')
    plt.grid(True, alpha=0.3)
    
    # Save the plot
    plt.savefig('task3_2_elbow.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    return
